{"version":3,"sources":["Compoenents/HeaderComponent.js","Compoenents/LightComponent.js","App.js","serviceWorker.js","Compoenents/FooterCoponent.js","index.js"],"names":["Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","eventKey","Component","Light","props","context","this","state","src","App","getRequest","path","a","fetch","response","json","then","res","console","log","body","express","setState","data","bind","Button","onClick","Boolean","window","location","hostname","match","Footer","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2TAsCeA,E,uKA/BP,OAEI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACnD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,qBACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,aAAf,YACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,YAAf,WACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,WAAWL,GAAG,2BAC7B,kBAACI,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,UACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,kBACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,aACA,kBAACQ,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,oBAGR,kBAACK,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIE,KAAL,CAAUP,KAAK,UAAf,cACA,kBAACK,EAAA,EAAIE,KAAL,CAAUK,SAAU,EAAGZ,KAAK,UAA5B,qB,GAvBHa,a,QCwCNC,E,kDAtCX,WAAYC,EAAOC,GAAU,uCACnBD,EAAOC,G,qDAIb,MAAwB,OAApBC,KAAKF,MAAMG,MAEP,yBAAKZ,UAAU,oCACX,wBAAIA,UAAU,mBAAd,wBACA,yBAAKA,UAAU,8BACX,yBAAKa,IAAI,wBAAwBb,UAAU,kBAI7B,QAApBW,KAAKF,MAAMG,MAEb,yBAAKZ,UAAU,oCACX,wBAAIA,UAAU,mBAAd,wBACA,yBAAKA,UAAU,8BACX,yBAAKa,IAAI,yBAAyBb,UAAU,kBAMpD,yBAAKA,UAAU,oCACX,wBAAIA,UAAU,mBAAd,gCACA,wBAAIA,UAAU,mBAAmBW,KAAKF,MAAMG,OAC5C,yBAAKZ,UAAU,8BACX,yBAAKa,IAAI,2BAA2Bb,UAAU,sB,GA9BlDO,aC4ELO,E,kDAtEX,WAAYL,EAAOC,GAAU,IAAD,8BACxB,cAAMD,EAAOC,IAmBjBK,WApB4B,uCAoBf,WAAOC,GAAP,iBAAAC,EAAA,sEACcC,MAzBX,4BAyB+BF,GADlC,cACHG,EADG,gBAEUA,EAASC,OACvBC,MAAK,SAAAC,GAAG,OAAIA,KACZD,KAAKE,QAAQC,OAJT,OAEHC,EAFG,OAKTF,QAAQC,IAAIR,EAAO,gBAIR,eAARA,EACoB,GAAfS,EAAKC,QACL,EAAKC,SAAS,CAACf,MAAM,QACF,GAAda,EAAKC,SACV,EAAKC,SAAS,CAACf,MAAM,OAGzB,EAAKe,SAAS,CAACf,MAAOa,EAAKC,UAhBtB,2CApBe,sDAGxB,EAAKd,MAAQ,CACTgB,KAAM,kBACNhB,MAAO,OAEX,EAAKG,WAAa,EAAKA,WAAWc,KAAhB,gBAPM,E,qDAwClB,IAAD,OACL,OACI,yBAAK7B,UAAU,aACX,6BACI,kBAAC,EAAD,CAAOY,MAAOD,KAAKC,MAAMA,SAE7B,yBAAKZ,UAAU,OACX,yBAAKA,UAAU,SACX,kBAAC8B,EAAA,EAAD,CAAQ9B,UAAU,gBAAgBR,QAAQ,UAClCuC,QAAS,kBAAM,EAAKhB,WAAW,SADvC,OAGJ,yBAAKf,UAAU,SACX,kBAAC8B,EAAA,EAAD,CAAQ9B,UAAU,gBAAgBR,QAAQ,SAClCuC,QAAS,kBAAM,EAAKhB,WAAW,UADvC,SAIR,yBAAKf,UAAU,OACX,yBAAKA,UAAU,UACX,kBAAC8B,EAAA,EAAD,CAAQ9B,UAAU,gBAAgBR,QAAQ,OAClCuC,QAAS,kBAAM,EAAKhB,WAAW,gBADvC,oB,GA3DNR,a,QCGEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCISC,MAnBf,SAAgB5B,GACZ,OACI,yBAAKT,UAAU,mBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,8BAGX,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,YACX,oECA5BsC,iBACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAELC,SAASC,eAAe,SFiHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.c1d58ce0.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Navbar,Nav,NavDropdown}from 'react-bootstrap'\n\nclass Header extends Component{\n\n\n    render() {\n        return(\n\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"#home\">Delarea Light App</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#features\">Features</Nav.Link>\n                        <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n                        <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\n                            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                            <NavDropdown.Divider />\n                            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                    <Nav>\n                        <Nav.Link href=\"#deets\">More deets</Nav.Link>\n                        <Nav.Link eventKey={2} href=\"#memes\">\n                            Dank memes\n                        </Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n\n\n}\n\nexport default Header;","import React, {Component} from 'react';\n\n\n\nclass Light extends Component{\n    constructor(props, context) {\n        super(props, context);\n\n    }\n    render(){\n        if (this.props.state ===\"on\") {\n            return (\n                <div className='container justify-content-center'>\n                    <h1 className='lightStatusText'> Hey!, the light is </h1>\n                    <div className='row justify-content-center'>\n                        <img src='/assets/images/on.png' className='stateImage '/>\n                    </div>\n                </div>\n            );\n        } else if(this.props.state ===\"off\") {\n            return (\n                <div className='container justify-content-center'>\n                    <h1 className='lightStatusText'> Hey!, the light is </h1>\n                    <div className='row justify-content-center'>\n                        <img src='/assets/images/off.png' className='stateImage '/>\n                    </div>\n                </div>\n            );\n        }else{\n            return(\n                <div className='container justify-content-center'>\n                    <h1 className='lightStatusText'> Error! call eyal or shaked </h1>\n                    <h2 className='lightStatusText'>{this.props.state}</h2>\n                    <div className='row justify-content-center'>\n                        <img src='/assets/images/error.png' className='stateImage '/>\n                    </div>\n                </div>\n            );\n\n        }\n    }\n}\n\nexport default Light;","import React, {Component} from 'react';\nimport './App.css';\nimport './Compoenents/HeaderComponent';\nimport {Button} from \"react-bootstrap\";\nimport Light from \"./Compoenents/LightComponent\";\n\nconst server_path = \"http://10.100.102.44:5000\"\nconst dummy_server_path = \"http://localhost:5000\";\n\nclass App extends Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            data: \"press get state\",\n            state: \"off\"\n        }\n        this.getRequest = this.getRequest.bind(this);\n    }\n\n    /**\n     * Manage get requests to the server\n     * Available posts requests:\n     * /off\n     * /on\n     * /get_state\n     *\n     * @param path\n     * @returns {Promise<void>}\n     */\n    getRequest = async (path) => {\n        const response = await fetch(server_path + path);\n        const body = await response.json()\n            .then(res => res)\n            .then(console.log())\n        console.log(path + \" was pressed\")\n\n        //only for the get_state response we need\n        //to parse the answer\n        if(path ===\"/get_state\"){\n            if((body.express)==1){\n                this.setState({state:\"off\"})\n            }else if(body.express==0){\n                this.setState({state:\"on\"})\n            }\n        }else{\n            this.setState({state: body.express})\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div>\n                    <Light state={this.state.state}/>\n                </div>\n                <div className='row'>\n                    <div className='col-6'>\n                        <Button className='controlButton' variant=\"success\"\n                                onClick={() => this.getRequest('/on')}>On</Button>\n                    </div>\n                    <div className='col-6'>\n                        <Button className='controlButton' variant=\"danger\"\n                                onClick={() => this.getRequest('/off')}>Off</Button>\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col-12'>\n                        <Button className='controlButton' variant=\"dark\"\n                                onClick={() => this.getRequest('/get_state')}>Get\n                            State</Button>\n                    </div>\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction Footer(props) {\n    return (\n        <div className=\"footer bg-dark \">\n            <div className=\"container\">\n                <div className=\"row justify-content-center\">\n\n\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-auto\">\n                            <p>©Copyright 2019 Rosey Stella</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default Footer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { render } from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from \"./Compoenents/HeaderComponent\";\nimport Footer from \"./Compoenents/FooterCoponent\";\n\n\nrender((\n    <BrowserRouter>\n        <Header/>\n        <App/>\n        <Footer/>\n    </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}